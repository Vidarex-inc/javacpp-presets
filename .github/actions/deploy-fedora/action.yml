name: Deploy on Fedora
description: Deploy on Fedora
runs:
  using: composite
  steps:
    - name: Install environment
      shell: bash
      run: |
        cd /root
        mkdir -p .ccache
        echo "max_size = 2.0G"                                                                        > .ccache/ccache.conf
        echo "hash_dir = false"                                                                      >> .ccache/ccache.conf
        echo "sloppiness = file_macro,include_file_ctime,include_file_mtime,pch_defines,time_macros" >> .ccache/ccache.conf

        FEDORA_VERSION=$(rpm -E %fedora)
        dnf update
        dnf install -y dnf-plugins-core

        dnf -y install ant boost-devel ccache cmake maven git clang gcc-c++ gcc-gfortran java-1.8.0-openjdk-devel python3 python3-devel python3-pip swig file which wget unzip tar bzip2 gzip xz patch autoconf-archive automake make libtool bison flex perl nasm alsa-lib-devel freeglut-devel gtk2-devel libusb-compat-0.1-devel libusb1-devel libcurl-devel expat-devel gettext-devel openssl-devel bzip2-devel zlib-devel SDL2-devel libva-devel libxkbcommon-devel libxkbcommon-x11-devel "xcb-util*" fontconfig-devel libffi-devel ragel ocl-icd-devel GeoIP-devel pcre-devel ssdeep-devel yajl-devel
        # https://gcc.gnu.org/legacy-ml/gcc-patches/2018-01/msg01962.html

        curl -LO https://services.gradle.org/distributions/gradle-7.1.1-bin.zip
        unzip gradle-7.1.1-bin.zip -d /opt/
        ln -sf /opt/gradle-7.1.1/bin/gradle /usr/bin/gradle

        python3 -m pip install gdown || python3 -m pip install gdown

        if [[ $CI_DEPLOY_PLATFORM == android-* ]]; then
          curl -LO https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
          unzip -qq android-ndk-r21e-linux-x86_64.zip
          ln -sf android-ndk-r21e android-ndk
          export MAVEN_OPTIONS="-Djavacpp.platform.root=$(pwd)/android-ndk/ -Djava.library.path="
        fi

        if [[ -n ${CI_DEPLOY_NEED_BAZEL:-} ]]; then
          dnf copr enable vbatts/bazel
          dnf install bazel
        fi
        
        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ -n ${CI_DEPLOY_NEED_CUDA:-} ]]; then
          echo "Installing CUDA, cuDNN, etc"
          dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/cuda-rhel9.repo
          dnf clean all
          dnf module disable nvidia-driver
          dnf -y --setopt=cuda-rhel9-x86_64.module_hotfixes=true cuda-drivers-525.60.13-1.x86_64
        
          dnf -y install cuda libcudnn8 libcudnn8-devel libnccl libnccl-devel
        
          ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so
          ln -sf /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/libnvidia-ml.so
          mv /usr/include/cudnn* /usr/include/nccl* /usr/local/cuda/include/
          mv /usr/lib64/libcudnn* /usr/lib64/libnccl* /usr/local/cuda/lib64/

          # Work around issues with CUDA 10.2/11.x
          mv /usr/include/cublas* /usr/include/nvblas* /usr/local/cuda/include/ || true
          mv /usr/lib64/libcublas* /usr/lib64/libnvblas* /usr/local/cuda/lib64/ || true
          for f in /usr/local/cuda/include/*_v8.h; do ln -sf $f ${f:0:${#f}-5}.h; done
          for f in /usr/local/cuda/lib64/libcudnn*so.8.*; do ln -sf $f ${f:0:${#f}-4}; ln -sf $f ${f:0:${#f}-6}; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f $f.2; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f ${f:0:${#f}-1}1; done
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.1
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.2
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.3
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.4
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.5
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.6
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.7
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.8
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so.1
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so.1
          sed -i s/cublas_v2.h/cublas_api.h/g /usr/local/cuda/include/cublasXt.h
          sed -i /block_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /device_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /device_segmented_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /warp_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh

          # Remove downloaded archives and unused libraries to avoid running out of disk space
          rm -f *.rpm *.tgz *.txz *.tar.*
          rm -f $(find /usr/local/cuda/ -name '*.a' -and -not -name libcudart_static.a -and -not -name libcudadevrt.a)
        fi

        if [[ "$CI_DEPLOY_MODULE" == "nvcodec" ]]; then
          echo Installing NVIDIA Video Codec SDK
          python3 -m gdown.cli https://drive.google.com/uc?id=1dh3P5JLUUe9EXE0GSJj6VDWYlr7W89dO
          unzip Video_Codec_SDK_11.1.5.zip -d /usr/local
          ln -sf /usr/local/Video_Codec_SDK_* /usr/local/videocodecsdk
        fi

        if [[ "$CI_DEPLOY_MODULE" == "tensorrt" ]]; then
          echo Installing TensorRT
          python3 -m gdown.cli https://drive.google.com/uc?id=1UZLOE_RylYGMC80LzJ7m7iiKrTzYF_Qy
          tar -hxvf TensorRT-8.4.3.1.Linux.x86_64-gnu.cuda-11.6.cudnn8.4.tar.gz -C /usr/local/
          ln -sf /usr/local/TensorRT* /usr/local/tensorrt
        fi

        if [[ "$CI_DEPLOY_MODULE" == "mkl" ]]; then
          echo Installing MKL
          curl -LO https://registrationcenter-download.intel.com/akdlm/IRC_NAS/18898/l_onemkl_p_2022.2.0.8748_offline.sh
          bash l_onemkl_p_2022.2.0.8748_offline.sh -s -a -s --eula accept
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture i386
          python3 -m gdown.cli https://drive.google.com/uc?id=1BOpSik1Fndagzjf4ykwzermt2qlTzsWI
          tar -xzvf flycapture2-2.13.3.31-i386-pkg_xenial.tgz
          find -name *.deb | while read f; do ar -xv $f; tar --totals -xf data.tar.xz -C /; done;
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amd64
          python3 -m gdown.cli https://drive.google.com/uc?id=1YtVjdnbQLZHX_ocQ6xAmiq6pjftuPOPd
          tar -xzvf flycapture2-2.13.3.31-amd64-pkg_xenial.tgz
          find -name *.deb | while read f; do ar -xv $f; tar --totals -xf data.tar.xz -C /; done;
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ "$CI_DEPLOY_MODULE" == "spinnaker" ]]; then
          echo Installing Spinnaker amd64
          python3 -m gdown.cli https://drive.google.com/uc?id=1zr9k4x-NI3OkVMLCccSBY4VtR-16iAQG
          tar -xzvf spinnaker-2.4.0.143-Ubuntu18.04-amd64-pkg.tar.gz
          find -name *.deb | while read f; do ar -xv $f; tar --totals -xvf data.tar.xz -C /; done;
        fi

        if [[ -n ${CI_DEPLOY_NEED_GCC:-} ]]; then
          rm -f /usr/lib/libgfortran.so.3* /usr/lib64/libgfortran.so.3* # not required for GCC 7+
          rm -f /usr/lib/libgfortran.so.4* /usr/lib64/libgfortran.so.4* # not required for GCC 9+
        else
          rm -f /usr/lib/libgfortran.so.5* /usr/lib64/libgfortran.so.5* # remove library from GCC 9+
        fi

        GRADLE_TASK=publishToMavenLocal
        MAVEN_PHASE=install
        if [[ -n ${CI_DEPLOY_USERNAME:-} ]] && [[ ! "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          GRADLE_TASK=publish
          MAVEN_PHASE=deploy
          if [[ "${{ github.event.head_commit.message }}" == Release* ]] || [[ "${GITHUB_REF#refs/heads/}" == "release" ]]; then
            python3 -m gdown.cli -q -O settings.tar.gz https://drive.google.com/uc?id=$CI_DEPLOY_SETTINGS
            tar -xzf settings.tar.gz
            MAVEN_OPTIONS="$MAVEN_OPTIONS -Dgpg.homedir=$(pwd)/.gnupg/ -DperformRelease -DstagingRepositoryId=$STAGING_REPOSITORY"
          fi
        fi
        echo "GPG_PASSPHRASE=***" >> $GITHUB_ENV
        echo "GRADLE_TASK=$GRADLE_TASK" >> $GITHUB_ENV
        echo "MAVEN_PHASE=$MAVEN_PHASE" >> $GITHUB_ENV
        echo "MAVEN_OPTIONS=$MAVEN_OPTIONS" >> $GITHUB_ENV

    - name: Build project
      shell: bash
      run: |
        git --version
        gcc --version
        cmake --version
        gradle --version
        mvn -version
        gpg --version
        python3 --version
        ccache -s --version
        df -h

        export MAKEJ=$(getconf _NPROCESSORS_ONLN)
        echo Fetching $GITHUB_REPOSITORY@$GITHUB_SHA
        git submodule update --init --recursive
        git submodule foreach --recursive 'git reset --hard'

        echo "Fixing HOME to /root (was '$HOME')"
        export HOME=/root

        if [[ -n ${CI_DEPLOY_NEED_GRADLE:-} ]]; then
          echo Executing Gradle $GRADLE_TASK ${{ matrix.options }} $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export GRADLE_OPTIONS="-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=$CI_DEPLOY_PLATFORM -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} $CI_DEPLOY_OPTIONS --info"
          gradle clean build $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle
          echo Publishing only now to help avoid race conditions with Gradle
          gradle $GRADLE_TASK $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle --refresh-dependencies
        else
          mkdir -p $HOME/.m2
          echo "<settings>" > $HOME/.m2/settings.xml
          echo "<mirrors><mirror><id>google-maven-central</id><name>GCS Maven Central mirror</name><url>https://maven-central.storage-download.googleapis.com/maven2/</url><mirrorOf>central</mirrorOf></mirror></mirrors>" >> $HOME/.m2/settings.xml
          echo "<servers><server><id>sonatype-nexus-snapshots</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server><server><id>sonatype-nexus-staging</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server></servers>" >> $HOME/.m2/settings.xml
          echo "</settings>" >> $HOME/.m2/settings.xml

          SECONDS=$(( RANDOM % 300 ))
          echo Sleeping $SECONDS seconds to help avoid race conditions with Maven
          sleep $SECONDS

          echo Executing Maven $MAVEN_PHASE $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export EXT=${{ matrix.ext }}
          export EXT2=${EXT:1}
          export MAVEN_OPTS="-Xss2m -Xmx4g"
          export MAVEN_OPTIONS="clean $MAVEN_PHASE -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=$CI_DEPLOY_PLATFORM -Djavacpp.platform.extension=$EXT $MAVEN_OPTIONS $CI_DEPLOY_OPTIONS"
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -pl .,$CI_DEPLOY_MODULE && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/$EXT2/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          if [[ -e $CI_DEPLOY_MODULE/platform/redist/pom.xml ]]; then
            for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/redist/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          fi
        fi
        df -h

    - name: Clean up
      shell: bash
      run: |
        cd /root
        rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')
